#!/usr/bin/env node

import { join } from "node:path";
import { createHmac } from "node:crypto";
import {
  writeLines,
  isIPv6Address,
  normalizeIPAddress
} from "../src/utils.mjs";
import { prepare } from "../src/cmd.mjs";

const { root, args, options } = await prepare();

const owner = await root.load(args[0]);

await generateNamedDefs(owner, options.output);

console.log("depends", "mf-named");
console.log("replaces", "mf-named-zones");
console.log("description", `named defintions for ${owner.name}`);

function fullName(name) {
  return name.endsWith(".") ? name : name + ".";
}

async function generateNamedDefs(owner, targetDir) {
  const dns = owner.dns;
  const ttl = dns.recordTTL;
  const updates = [Math.ceil(Date.now() / 1000), ...dns.soaUpdates].join(" ");

  for (const domain of dns.domains) {
    const zones = [];
    const records = new Set();

    const nameserver = (await owner.service({ type: "dns" }))?.owner;
    const rname = dns.administratorEmail.replace(/@/, ".");

    let maxKeyLength;

    const createRecord = (key, type, ...values) => {
      values = values.map(v =>
        typeof v === "number" ? String(v).padStart(3) : v
      );

      return {
        key,
        toString: () =>
          `${key.padEnd(maxKeyLength, " ")} ${ttl} IN ${type.padEnd(
            5,
            " "
          )} ${values.join(" ")}`
      };
    };

    for await (const mail of owner.findServices({ type: "smtp" })) {
      records.add(
        createRecord("@", "MX", mail.priority, fullName(mail.owner.domainName))
      );
    }

    console.log(owner.fullName, domain, nameserver?.hostName, rname);
    const reverseZones = new Map();

    const SOARecord = createRecord(
      "@",
      "SOA",
      fullName(nameserver?.domainName),
      fullName(rname),
      `(${updates})`
    );

    const NSRecord = createRecord("@", "NS", fullName(nameserver?.rawAddress));

    const catalogZone = {
      id: `catalog.${domain}`,
      file: `catalog.${domain}.zone`,
      records: new Set([
        SOARecord,
        NSRecord,
        createRecord(fullName(`version.${domain}`), "TXT", '"2"')
      ])
    };

    const zone = {
      id: domain,
      file: `${domain}.zone`,
      records: new Set([SOARecord, NSRecord, ...records])
    };
    zones.push(zone);

    const hosts = new Set();
    const addresses = new Set();

    for await (const {
      address,
      subnet,
      networkInterface
    } of owner.networkAddresses()) {
      const host = networkInterface.host;

      if (!addresses.has(address)) {
        addresses.add(address);
  
        zone.records.add(
          createRecord(
            fullName(host.domainName),
            isIPv6Address(address) ? "AAAA" : "A",
            normalizeIPAddress(address)
          )
        );
      }

      if (!hosts.has(host)) {
        hosts.add(host);
        for (const service of host.findServices()) {
          if (service.master && service.alias) {
            zone.records.add(
              createRecord(service.alias, "CNAME", fullName(host.domainName))
            );
          }

          if (dns.hasSVRRecords && service.srvPrefix) {
            zone.records.add(
              createRecord(
                fullName(`${service.srvPrefix}.${host.domainName}`),
                "SRV",
                service.priority,
                service.weight,
                service.port,
                fullName(host.domainName)
              )
            );
          }
        }

        if (subnet) {
          let reverseZone = reverseZones.get(subnet.address);

          if (!reverseZone) {
            const reverseArpa = reverseArpaAddress(subnet.prefix);
            reverseZone = {
              id: reverseArpa,
              file: `${reverseArpa}.zone`,
              records: new Set([SOARecord, NSRecord])
            };
            zones.push(reverseZone);
            reverseZones.set(subnet.address, reverseZone);
          }
          reverseZone.records.add(
            createRecord(
              fullName(reverseArpaAddress(address)),
              "PTR",
              fullName(host.domainName)
            )
          );
        }
      }
    }

    const zoneConfig = [];

    if (dns.hasCatalog) {
      zones.push(catalogZone);
    }

    for (const zone of zones) {
      if (zone !== catalogZone) {
        const hash = createHmac("md5", zone.id).digest("hex");
        catalogZone.records.add(
          createRecord(`${hash}.zones.${domain}.`, "PTR", `${zone.id}.`)
        );
      }

      zoneConfig.push(`zone \"${zone.id}\" {`);
      zoneConfig.push(`  type master;`);
      zoneConfig.push(`  file \"${zone.file}\";`);

      zoneConfig.push(
        `  allow-update { ${
          dns.allowedUpdates.length ? dns.allowedUpdates.join(";") : "none"
        }; };`
      );
      zoneConfig.push(`  notify yes;`);
      zoneConfig.push(`};`);
      zoneConfig.push("");

      maxKeyLength = 0;
      for (const r of zone.records) {
        if (r.key.length > maxKeyLength) {
          maxKeyLength = r.key.length;
        }
      }

      writeLines(join(targetDir, "var/lib/named"), zone.file, zone.records);
    }

    writeLines(
      join(targetDir, "etc/named.d/zones"),
      `${domain}.zone.conf`,
      zoneConfig
    );
  }
}

export function reverseAddress(address) {
  if (isIPv6Address(address)) {
    return normalizeIPAddress(address)
    .replaceAll(":", "")
    .split("")
    .reverse()
    .join(".");
  }

    return address.split(".").reverse().join(".");
}

export function reverseArpaAddress(address) {
  return (
    reverseAddress(address) +
    (isIPv6Address(address) ?  ".ip6.arpa" : ".in-addr.arpa")
  );
}
