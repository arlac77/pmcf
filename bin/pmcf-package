#!/usr/bin/env node

import { join } from "node:path";
import { readFile, mkdtemp } from "node:fs/promises";
import { packageDirectory } from "pkg-dir";
import {
  FileContentProvider,
  createPublishingDetails,
  ARCH
} from "npm-pkgbuild";
import { prepare } from "../src/cmd.mjs";

const { root, args, options } = await prepare();

const pkgDir = await packageDirectory({ cwd: options.root });
const pkg = JSON.parse(await readFile(join(pkgDir, "package.json"), "utf8"));

const publishingDetails = createPublishingDetails(options.publish, process.env);

for (const name of args) {
  const object = await root.load(name);
  const stagingDir = join(options.output, object.fullName);
  const { properties } = await object.preparePackage(stagingDir);

  properties.version = pkg.version;
  properties.license = pkg.license;
  console.log(properties);

  const output = new ARCH(properties);
  const sources = new FileContentProvider({ base: stagingDir })[
    Symbol.asyncIterator
  ]();

  const destination = await mkdtemp(output.constructor.name);
  console.log(destination);

  const artifact = await output.create(sources, [], publishingDetails, {
    ...options,
    destination
  });

  console.log(artifact);

  await Promise.all(
    publishingDetails.map(publishDetail =>
      output.publish(artifact, publishDetail, output.properties)
    )
  );
}
