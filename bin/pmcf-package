#!/usr/bin/env node

import { join, resolve } from "node:path";
import { readFile, mkdtemp } from "node:fs/promises";
import { tmpdir } from "node:os";
import { cwd, env } from "node:process";
import { packageDirectory } from "package-directory";
import { createPublishingDetails } from "npm-pkgbuild";
import { prepare } from "../src/cli.mjs";
import { asArray } from "../src/utils.mjs";

const { root, args, options } = await prepare({
  publish: {
    type: "string"
  },
  output: {
    type: "string",
    short: "o"
  }
});

options.output = options.output
  ? resolve(cwd(), options.output)
  : await mkdtemp(join(tmpdir(), "pmcf"));

const pkgDir = await packageDirectory({ cwd: options.root });
const pkg = JSON.parse(await readFile(join(pkgDir, "package.json"), "utf8"));
const publishingDetails = createPublishingDetails(
  asArray(options.publish),
  env
);

for (const object of root.find(args)) {
  const stagingDir = join(options.output, object.fullName);

  //console.log(`packages for ${object.fullName}`);
  for await (const { sources, outputs, properties } of object.preparePackages(
    stagingDir
  )) {
    for (const outputFactory of outputs) {
      properties.version = pkg.version;
      properties.license = pkg.license;
      properties.maintainer = pkg.contributors.map(
        c => c.name + (c.email ? ` <${c.email}>` : "")
      );

      const output = new outputFactory(properties);

      const artifact = await output.create(
        sources.map(source => source[Symbol.asyncIterator]()),
        [],
        publishingDetails,
        options
      );

      if (properties.verbose) {
        console.log(artifact);
      }

      if (!options.dry) {
        await Promise.all(
          publishingDetails.map(publishDetail =>
            output.publish(artifact, publishDetail)
          )
        );
      }
    }
  }
}
