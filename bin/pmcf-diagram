#!/usr/bin/env node

import { prepare } from "../src/cli.mjs";

const { root, args } = await prepare();

const location = await root.load(args[0]);

function q(str) {
  return str.match(/^\w+$/) ? str : `"${str}"`;
}

console.log("graph G {");
console.log("  node [shape=record];");
for await (const host of location.hosts()) {
  console.log(
    `  ${q(host.name)} [label="${host.name}|{${[
      ...host.networkInterfaces.values()
    ]
      .filter(ni => !ni.isTemplate && ni.kind !== "loopback")
      .map(ni => `<${q(ni.name)}> ${ni.name}`)
      .join("|")}}"];`
  );
}

for await (const network of location.networks()) {
  console.log(
    `  ${q(network.name)} [label="${network.name}\\n${[...network.subnets()]
      .map(s => s.address)
      .join(" ")}" shape=circle];`
  );

  for await (const na of network.networkAddresses(
    na =>
      na.networkInterface.network === network &&
      !na.networkInterface.isTemplate &&
      na.networkInterface.kind !== "loopback"
  )) {
    console.log(
      `  ${q(network.name)} -- ${q(na.networkInterface.host.name)}:${q(
        na.networkInterface.name
      )}[label="${na.address}"];`
    );
  }
}

for await (const cluster of location.clusters()) {
  console.log(` ${[...cluster.members].map(b => `${q(b.host.name)}:${b.name}`).join(" -- ")};`);
}

for (const bridge of location.bridges) {
  console.log(` ${[...bridge].map(b => q(b.name)).join(" -- ")};`);
}

console.log("}");
