#!/usr/bin/env node

import { mkdir, copyFile } from "node:fs/promises";
import { join } from "node:path";
import { writeLines, sectionLines } from "../src/utils.mjs";
import { prepare } from "../src/cmd.mjs";

const { world, args, options } = prepare();

const location = await world.location(args[0] || "SW");

await generateLocationDefs(location, options.output);

console.log(
  "provides",
  "location",
  "mf-location",
  `mf-location-${location.name}`
);
console.log("replaces", `mf-location-${location.name}`);
console.log("description", `location definitions for ${location.name}`);

async function generateLocationDefs(location, dir) {
  const sl = (await Array.fromAsync(location.dns.services())).map(s=>s.ipAddresses).flat()
  const s1 = sl.shift();

  await writeLines(
    join(dir, "etc/systemd/resolved.conf.d"),
    `${location.name}.conf`,
    sectionLines("Resolve", {
      DNS: s1,
      FallbackDNS: sl.join(","),
      Domains: location.domain,
      DNSSEC: "no",
      MulticastDNS: "yes",
      LLMNR: "no"
    })
  );

  await writeLines(
    join(dir, "etc/systemd/journald.conf.d"),
    `${location.name}.conf`,
    sectionLines("Journal", {
      Compress: "yes",
      SystemMaxUse: "500M",
      SyncIntervalSec: "15m"
    })
  );

  await writeLines(
    join(dir, "etc/systemd/timesyncd.conf.d"),
    `${location.name}.conf`,
    sectionLines("Time", {
      NTP: location.ntp.servers.join(" "),
      PollIntervalMinSec: 60,
      SaveIntervalSec: 3600
    })
  );

  const locationDir = join(dir, "etc", "location");

  await mkdir(locationDir, { recursive: true });

  copyFile(
    join(location.directory, "location.json"),
    join(locationDir, "location.json")
  );
}
