#!/usr/bin/env node

import { mkdir, copyFile } from "node:fs/promises";
import { join } from "node:path";
import { Location } from "pmcf";
import { writeLines, sectionLines } from "../src/utils.mjs";
import { prepare } from "../src/cmd.mjs";

const { world, args, options } = prepare();

const location = await world.load(args[0], { type: Location });

await generateLocationDefs(location, options.output);

console.log(
  "provides",
  "location",
  "mf-location",
  `mf-location-${location.name}`
);
console.log("replaces", `mf-location-${location.name}`);
console.log("description", `location definitions for ${location.name}`);

async function generateLocationDefs(location, dir) {
  const dns = location.dns;
  const dnsServices = (await Array.fromAsync(dns.services())).sort(
    (a, b) => a.priority - b.priority
  );

  console.log(dnsServices);

  const master = dnsServices
    .filter(s => s.priority < 10)
    .map(s => s.ipAddresses)
    .flat();
  const fallback = dnsServices
    .filter(s => s.priority >= 10)
    .map(s => s.ipAddresses)
    .flat();

  await writeLines(
    join(dir, "etc/systemd/resolved.conf.d"),
    `${location.name}.conf`,
    sectionLines("Resolve", {
      DNS: master.join(" "),
      FallbackDNS: fallback.join(" "),
      Domains: dns.domains.join(" "),
      DNSSEC: "no",
      MulticastDNS: "yes",
      LLMNR: "no"
    })
  );

  await writeLines(
    join(dir, "etc/systemd/journald.conf.d"),
    `${location.name}.conf`,
    sectionLines("Journal", {
      Compress: "yes",
      SystemMaxUse: "500M",
      SyncIntervalSec: "15m"
    })
  );

  await writeLines(
    join(dir, "etc/systemd/timesyncd.conf.d"),
    `${location.name}.conf`,
    sectionLines("Time", {
      NTP: location.ntp.servers.join(" "),
      PollIntervalMinSec: 60,
      SaveIntervalSec: 3600
    })
  );

  const locationDir = join(dir, "etc", "location");

  await mkdir(locationDir, { recursive: true });

  copyFile(
    join(location.directory, "location.json"),
    join(locationDir, "location.json")
  );
}
